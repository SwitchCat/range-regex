<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="ConverterDefault.php" path="/">
    <totals>
      <lines total="155" comments="5" code="150" executable="75" executed="74" percent="98.67"/>
      <methods count="9" tested="8" percent="88.89"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="0" percent="0.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="SwitchCat\RangeRegex\ConverterDefault" start="5" executable="75" executed="74" crap="33">
      <namespace name="SwitchCat\RangeRegex"/>
      <method name="toRegex" signature="toRegex(SwitchCat\RangeRegex\Range $range): string" start="7" end="34" crap="5" executable="14" executed="14" coverage="100"/>
      <method name="splitToRanges" signature="splitToRanges(int $min, int $max): array" start="36" end="64" crap="7.01" executable="17" executed="16" coverage="94.117647058824"/>
      <method name="splitToPatterns" signature="splitToPatterns($min, $max): array" start="66" end="76" crap="2" executable="7" executed="7" coverage="100"/>
      <method name="siftPatterns" signature="siftPatterns(array $negatives, array $positives): string" start="78" end="86" crap="1" executable="5" executed="5" coverage="100"/>
      <method name="filterPatterns" signature="filterPatterns(array $arr, array $comparison, string $prefix, bool $intersection): array" start="88" end="103" crap="7" executable="8" executed="8" coverage="100"/>
      <method name="rangeToPattern" signature="rangeToPattern(int $start, int $stop): string" start="105" end="131" crap="7" executable="16" executed="16" coverage="100"/>
      <method name="countNines" signature="countNines(int $num, int $nines): int" start="133" end="136" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="countZeros" signature="countZeros(int $integer, int $zeros): int" start="138" end="141" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="zip" signature="zip(int $start, int $stop): array" start="143" end="154" crap="2" executable="6" executed="6" coverage="100"/>
    </class>
    <coverage>
      <line nr="9">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexMinEqualsMaxReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="10">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexMinEqualsMaxReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="12">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexMinEqualsMaxReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="13">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexMinEqualsMaxReturnsString"/>
      </line>
      <line nr="20">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="21">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="23">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="24">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
      </line>
      <line nr="25">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
      </line>
      <line nr="26">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
      </line>
      <line nr="27">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
      </line>
      <line nr="28">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
      </line>
      <line nr="31">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="33">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="38">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testSplitToRangesReturnsArray"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="39">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testSplitToRangesReturnsArray"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="40">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testSplitToRangesReturnsArray"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="42">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testSplitToRangesReturnsArray"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="43">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testSplitToRangesReturnsArray"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
      </line>
      <line nr="44">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testSplitToRangesReturnsArray"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
      </line>
      <line nr="47">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testSplitToRangesReturnsArray"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
      </line>
      <line nr="48">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testSplitToRangesReturnsArray"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
      </line>
      <line nr="51">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testSplitToRangesReturnsArray"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="52">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testSplitToRangesReturnsArray"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="54">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testSplitToRangesReturnsArray"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="55">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testSplitToRangesReturnsArray"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
      </line>
      <line nr="59">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testSplitToRangesReturnsArray"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
      </line>
      <line nr="60">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testSplitToRangesReturnsArray"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
      </line>
      <line nr="62">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testSplitToRangesReturnsArray"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="63">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testSplitToRangesReturnsArray"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="68">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="69">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="70">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="71">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="72">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="73">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="75">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="80">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="81">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="82">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="83">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="85">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="90">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="91">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="92">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="93">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="94">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="97">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="98">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
      </line>
      <line nr="102">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="107">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="108">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="109">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="110">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="111">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="112">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="114">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="115">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
      </line>
      <line nr="116">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
      </line>
      <line nr="119">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="120">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="121">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="124">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
      </line>
      <line nr="127">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="128">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="130">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="135">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testSplitToRangesReturnsArray"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="140">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testSplitToRangesReturnsArray"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="145">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="146">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="148">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="149">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="150">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
      <line nr="153">
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToArrayReturnsStringWithCorrectParams"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterDefaultTest::testToRegexReturnsString"/>
        <covered by="SwitchCat\RangeRegex\Tests\ConverterCachedTest::testToRegexReturnsString"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2"/>
      <line no="3">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">SwitchCat</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">RangeRegex</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="4"/>
      <line no="5">
        <token name="T_FINAL">final</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ConverterDefault</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IMPLEMENTS">implements</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Converter</token>
      </line>
      <line no="6">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="7">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">toRegex</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">Range</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$range</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_STRING">string</token>
      </line>
      <line no="8">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="9">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$min</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$range</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getMin</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="10">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$max</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$range</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getMax</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="11"/>
      <line no="12">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$min</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$max</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="13">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$min</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="14">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="15">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">/*</token>
      </line>
      <line no="16">
        <token name="T_COMMENT">        if ($min &gt; $max) {</token>
      </line>
      <line no="17">
        <token name="T_COMMENT">            return sprintf('%d|%d', $min, $max);</token>
      </line>
      <line no="18">
        <token name="T_COMMENT">        }        </token>
      </line>
      <line no="19">
        <token name="T_COMMENT">*/</token>
      </line>
      <line no="20">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$positives</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="21">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$negatives</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="22"/>
      <line no="23">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$min</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LT">&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="24">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$newMin</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="25">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$newMin</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$max</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LT">&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">abs</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$max</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$newMin</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="26">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$newMax</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">abs</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$min</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="27">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$negatives</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">splitToPatterns</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$newMin</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$newMax</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="28">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$min</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="29">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="30"/>
      <line no="31">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$positives</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$max</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_GREATER_OR_EQUAL">&gt;=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">splitToPatterns</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$min</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$max</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$positives</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="32"/>
      <line no="33">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">siftPatterns</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$negatives</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$positives</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="34">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="35"/>
      <line no="36">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">splitToRanges</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$min</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$max</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="37">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="38">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$nines</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="39">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$stops</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$max</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="40">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$stop</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">countNines</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$min</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$nines</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="41"/>
      <line no="42">
        <token name="T_WHITESPACE">        </token>
        <token name="T_WHILE">while</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$min</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_SMALLER_OR_EQUAL">&lt;=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$stop</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$stop</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_SMALLER_OR_EQUAL">&lt;=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$max</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="43">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">in_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$stop</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$stops</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="44">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$stops</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$stop</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="45">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="46"/>
      <line no="47">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$nines</token>
        <token name="T_INC">++</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="48">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$stop</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">countNines</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$min</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$nines</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="49">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="50"/>
      <line no="51">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$zeros</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="52">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$stop</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">countZeros</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$max</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_PLUS">+</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$zeros</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MINUS">-</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="53"/>
      <line no="54">
        <token name="T_WHITESPACE">        </token>
        <token name="T_WHILE">while</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$min</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LT">&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$stop</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$stop</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_SMALLER_OR_EQUAL">&lt;=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$max</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="55">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">in_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$stop</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$stops</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="56">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$stops</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$stop</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="57">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="58"/>
      <line no="59">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$zeros</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_PLUS_EQUAL">+=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="60">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$stop</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">countZeros</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$max</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_PLUS">+</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$zeros</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MINUS">-</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="61">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="62">
        <token name="T_WHITESPACE">        </token>
        <token name="T_STRING">sort</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$stops</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="63">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$stops</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="64">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="65"/>
      <line no="66">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">splitToPatterns</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$min</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$max</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="67">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="68">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$start</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$min</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="69">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$subPatterns</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="70">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$ranges</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">splitToRanges</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$min</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$max</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="71">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$ranges</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$index</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$range</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="72">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$subPatterns</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$index</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">rangeToPattern</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$start</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$range</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="73">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$start</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$range</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_PLUS">+</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="74">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="75">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$subPatterns</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="76">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="77"/>
      <line no="78">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">siftPatterns</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$negatives</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$positives</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_STRING">string</token>
      </line>
      <line no="79">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="80">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$onlyNegative</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">filterPatterns</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$negatives</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$positives</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'-'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="81">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$onlyPositives</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">filterPatterns</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$positives</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$negatives</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="82">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$intersected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">filterPatterns</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$negatives</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$positives</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'-?'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="83">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$subPatterns</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">array_merge</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$onlyNegative</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$intersected</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$onlyPositives</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="84"/>
      <line no="85">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">implode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'|'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$subPatterns</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="86">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="87"/>
      <line no="88">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">filterPatterns</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$arr</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$comparison</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$prefix</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$intersection</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="89">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="90">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$intersected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="91">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="92">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$arr</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$element</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="93">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$intersection</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">in_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$element</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$comparison</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="94">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$prefix</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$element</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="95">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="96"/>
      <line no="97">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$intersection</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">in_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$element</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$comparison</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="98">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$intersected</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$prefix</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$element</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="99">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="100">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="101"/>
      <line no="102">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$intersection</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$intersected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="103">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="104"/>
      <line no="105">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">rangeToPattern</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$start</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$stop</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_STRING">string</token>
      </line>
      <line no="106">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="107">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$pattern</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="108">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$digits</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="109">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$pairs</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">zip</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$start</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$stop</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="110">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$pairs</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$pair</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="111">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$startDigit</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$pair</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="112">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$stopDigit</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$pair</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="113"/>
      <line no="114">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$startDigit</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$stopDigit</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="115">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$pattern</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$startDigit</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="116">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONTINUE">continue</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="117">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="118"/>
      <line no="119">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$startDigit</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'0'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$stopDigit</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'9'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="120">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$pattern</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'[%d-%d]'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$startDigit</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$stopDigit</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="121">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONTINUE">continue</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="122">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="123"/>
      <line no="124">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$digits</token>
        <token name="T_INC">++</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="125">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="126"/>
      <line no="127">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$pattern</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$digits</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_GT">&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'[0-9]'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="128">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$pattern</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$digits</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_GT">&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'{%d}'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$digits</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="129"/>
      <line no="130">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$pattern</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="131">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="132"/>
      <line no="133">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">countNines</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$num</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$nines</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_STRING">int</token>
      </line>
      <line no="134">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="135">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_INT_CAST">(int)</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">mb_substr</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_VARIABLE">$num</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_MINUS">-</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MULT">*</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$nines</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">str_repeat</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'9'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$nines</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="136">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="137"/>
      <line no="138">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">countZeros</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$integer</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$zeros</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_STRING">int</token>
      </line>
      <line no="139">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="140">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$integer</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MINUS">-</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$integer</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_PERCENT">%</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">pow</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_LNUMBER">10</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$zeros</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="141">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="142"/>
      <line no="143">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">zip</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$start</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$stop</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="144">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="145">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$start</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">str_split</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$start</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="146">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$stop</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">str_split</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$stop</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="147"/>
      <line no="148">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$zipped</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="149">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$start</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$index</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$char</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="150">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$zipped</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$char</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$stop</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$index</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="151">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="152"/>
      <line no="153">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$zipped</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="154">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="155">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="156"/>
    </source>
  </file>
</phpunit>
